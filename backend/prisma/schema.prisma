generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 String              @id @default(uuid())
  email              String              @unique
  password           String?
  googleId           String?             @unique
  firstName          String?
  lastName           String?
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  role               String              @default("user")
  avatar             String?
  facebookId         String?             @unique
  isVerified         Boolean             @default(false)
  refreshToken       String?
  provider           String              @default("local")
  addresses          Address[]
  cart               Cart?
   resetToken       String?   @db.VarChar(255)
  resetTokenExpiry DateTime?
  cartItems          CartItem[]
  orders             Order[]
  reviews            Review[]
  shippingAddresses  ShippingAddress[]
  verificationTokens VerificationToken[]
  supportTickets     SupportTicket[]
  savedAddresses SavedAddress[]
  wishlist           Wishlist[]
}

model VerificationToken {
  id        String   @id @default(uuid())
  token     String   @unique
  userId    String
  expiresAt DateTime
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Product {
  id                 String        @id @default(uuid())
  name               String
  description        String?
  price              Float
  stock              Int           @default(0)
  categoryId         String?
  category           Category?     @relation(fields: [categoryId], references: [id])
  createdAt          DateTime      @default(now())
  updatedAt          DateTime      @updatedAt
  featured           Boolean       @default(false)
  imageUrl           String[]
  hasSizes           Boolean       @default(false)
  discountPercentage Float         @default(0)
  cartItems          CartItem[]
  orderItems         OrderItem[]
  productSizes       ProductSize[]
  reviews            Review[]
  wishlistedBy       Wishlist[]
}

model ProductSize {
  id        String  @id @default(uuid())
  productId String
  size      String
  stock     Int     @default(0)
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([productId, size])
}

model Cart {
  id        String     @id @default(uuid())
  userId    String     @unique
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  user      User       @relation(fields: [userId], references: [id])
  cartItems CartItem[]
}

model CartItem {
  id        String  @id @default(uuid())
  quantity  Int
  userId    String
  productId String
  cartId    String
  size      String?
  cart      Cart    @relation(fields: [cartId], references: [id], onDelete: Cascade)
  product   Product @relation(fields: [productId], references: [id])
  user      User    @relation(fields: [userId], references: [id])

  @@unique([cartId, productId, size])
}

model Order {
  id                    String                @id @default(uuid())
  userId                String?             
  status                String                @default("pending")
  total                 Float
  shippingAddressId     String?
  createdAt             DateTime              @default(now())
  updatedAt             DateTime              @updatedAt
  paymentIntentId       String?
  metadata              String?
  billingAddressId      String?
  paymentStatus         String                @default("awaiting")
  shipping              Float
  stripeClientSecret    String?
  stripePaymentIntentId String?               @unique
  subtotal              Float
  tax                   Float
  
  // Guest information
  guestEmail            String?
  guestFirstName        String?
  guestLastName         String?
  guestPhone            String?
  
  // Guest shipping address fields directly in Order
  guestShippingStreet   String?
  guestShippingCity     String?
  guestShippingState    String?
  guestShippingZipCode  String?
  guestShippingCountry  String?
  
  trackingNumber        String?
  shippedAt             DateTime?
  
  // Relations
  billingAddress        Address?              @relation("BillingAddress", fields: [billingAddressId], references: [id])
  shippingAddress       Address?              @relation("ShippingAddress", fields: [shippingAddressId], references: [id])
  user                  User?                 @relation(fields: [userId], references: [id]) // Must have the question mark
  orderItems            OrderItem[]
  payment               Payment?
  supportTickets        SupportTicket[]
}

model OrderItem {
  id        String  @id @default(uuid())
  orderId   String
  productId String
  quantity  Int
  price     Float
  size      String?
  order     Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product   Product @relation(fields: [productId], references: [id])
}

model Address {
  id             String  @id @default(uuid())
  userId         String
  street         String
  city           String
  state          String
  zipCode        String
  country        String  @default("US")
  isDefault      Boolean @default(false)
  user           User    @relation(fields: [userId], references: [id])
  billingOrders  Order[] @relation("BillingAddress")
  shippingOrders Order[] @relation("ShippingAddress")
}

model Payment {
  id                    String   @id @default(uuid())
  orderId               String   @unique
  amount                Float
  status                String   @default("pending")
  createdAt             DateTime @default(now())
  currency              String   @default("USD")
  paymentIntentId       String?  @unique
  paymentMethod         String   @default("stripe")
  cardBrand             String?
  lastFour              String?
  stripeChargeId        String?  @unique
  stripeCustomerId      String?
  stripePaymentMethodId String?
  order                 Order    @relation(fields: [orderId], references: [id])
}

model ShippingAddress {
  id       String @id @default(uuid())
  userId   String
  fullName String
  street   String
  city     String
  state    String
  zipCode  String
  country  String @default("US")
  user     User   @relation(fields: [userId], references: [id])
}

model StripeCustomer {
  id               String   @id @default(uuid())
  userId           String   @unique
  stripeCustomerId String   @unique
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  paymentMethods   Json?
}

model Review {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  productId String
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  rating    Int // 1-5 stars
  title     String?  @db.VarChar(255)
  content   String
  status    String   @default("APPROVED") // PENDING, APPROVED, REJECTED
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, productId])
}



model Category {
  id          String    @id @default(uuid())
  name        String    @unique
  description String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  products    Product[] // Add this relation
}

enum TicketStatus {
  OPEN
  IN_PROGRESS
  RESOLVED
  CLOSED
}

enum TicketPriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

model SupportTicket {
  id          String             @id @default(cuid())
  userId      String?
  user        User?              @relation(fields: [userId], references: [id])
  orderId     String?
  order       Order?             @relation(fields: [orderId], references: [id])
  subject     String
  description String             @db.Text
  status      TicketStatus       @default(OPEN)
  priority    TicketPriority     @default(MEDIUM)
  createdAt   DateTime           @default(now())
  updatedAt   DateTime           @updatedAt
  guestEmail  String?
  guestName   String?
  messages    TicketMessage[]
  attachments TicketAttachment[]
}

model TicketMessage {
  id        String        @id @default(cuid())
  ticketId  String
  ticket    SupportTicket @relation(fields: [ticketId], references: [id], onDelete: Cascade)
  fromUser  Boolean       @default(true)
  message   String        @db.Text
  createdAt DateTime      @default(now())
  staffId   String?
  staffName String?
}

model TicketAttachment {
  id        String        @id @default(cuid())
  ticketId  String
  ticket    SupportTicket @relation(fields: [ticketId], references: [id], onDelete: Cascade)
  fileName  String
  fileUrl   String
  fileSize  Int
  mimeType  String
  createdAt DateTime      @default(now())
}

model FAQ {
  id        String   @id @default(cuid())
  question  String
  answer    String   @db.Text
  category  String
  order     Int      @default(0)
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Wishlist {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  productId String
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())

  @@unique([userId, productId])
}



model SavedAddress {
  id          String   @id @default(cuid())
  userId      String
  fullName    String
  address1    String
  address2    String?
  city        String
  state       String
  postalCode  String
  country     String
  phoneNumber String?
  isDefault   Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  user        User     @relation(fields: [userId], references: [id])
}

